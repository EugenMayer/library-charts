suite: ingress - traefik metadata test
templates:
  - common.yaml
chart:
  appVersion: &appVer v9.9.9
release:
  name: test-release-name
  namespace: test-release-namespace
tests:
  - it: should pass with ingress created with annotations from traefik by default
    set:
      operator: &operator
        verify:
          enabled: false
      ingress:
        my-ingress:
          enabled: true
          primary: true
    asserts:
      - documentIndex: &ingressDoc 0
        isKind:
          of: Ingress
      - documentIndex: *ingressDoc
        equal:
          path: metadata.name
          value: test-release-name-common-test
      - documentIndex: *ingressDoc
        equal:
          path: metadata.annotations
          value:
            traefik.ingress.kubernetes.io/router.entrypoints: websecure
            traefik.ingress.kubernetes.io/router.middlewares: chain-basic-tc-system@kubernetescrd
      - documentIndex: *ingressDoc
        equal:
          path: metadata.namespace
          value: test-release-namespace

  - it: should pass with ingress created without traefik annotations when traefik false
    set:
      operator: *operator
      ingress:
        my-ingress:
          enabled: true
          primary: true
          integrations:
            traefik:
              enabled: false
    asserts:
      - documentIndex: *ingressDoc
        isKind:
          of: Ingress
      - documentIndex: *ingressDoc
        equal:
          path: metadata.name
          value: test-release-name-common-test
      - documentIndex: *ingressDoc
        isNull:
          path: metadata.annotations

  - it: should replace local fixedMiddlewares when allowCors true
    set:
      operator: *operator
      ingress:
        my-ingress:
          enabled: true
          primary: true
          integrations:
            traefik:
              enabled: true
              allowCors: true
              fixedMiddlewares:
                - some-fixed-middleware
    asserts:
      - documentIndex: *ingressDoc
        isKind:
          of: Ingress
      - documentIndex: *ingressDoc
        equal:
          path: metadata.name
          value: test-release-name-common-test
      - documentIndex: *ingressDoc
        equal:
          path: metadata.annotations
          value:
            traefik.ingress.kubernetes.io/router.entrypoints: websecure
            traefik.ingress.kubernetes.io/router.middlewares: tc-opencors-chain-tc-system@kubernetescrd

  - it: should replace global fixedMiddlewares when allowCors true
    set:
      operator: *operator
      ingress:
        my-ingress:
          enabled: true
          primary: true
          integrations:
            traefik:
              enabled: true
              allowCors: true
    asserts:
      - documentIndex: *ingressDoc
        isKind:
          of: Ingress
      - documentIndex: *ingressDoc
        equal:
          path: metadata.name
          value: test-release-name-common-test
      - documentIndex: *ingressDoc
        equal:
          path: metadata.annotations
          value:
            traefik.ingress.kubernetes.io/router.entrypoints: websecure
            traefik.ingress.kubernetes.io/router.middlewares: tc-opencors-chain-tc-system@kubernetescrd

  - it: should replace global fixedMiddlewares when local fixedMiddlewares is defined
    set:
      operator: *operator
      ingress:
        my-ingress:
          enabled: true
          primary: true
          integrations:
            traefik:
              enabled: true
              fixedMiddlewares:
                - some-fixed-middleware
    asserts:
      - documentIndex: *ingressDoc
        isKind:
          of: Ingress
      - documentIndex: *ingressDoc
        equal:
          path: metadata.name
          value: test-release-name-common-test
      - documentIndex: *ingressDoc
        equal:
          path: metadata.annotations
          value:
            traefik.ingress.kubernetes.io/router.entrypoints: websecure
            traefik.ingress.kubernetes.io/router.middlewares: some-fixed-middleware-tc-system@kubernetescrd

  - it: should override default entrypoint(s)
    set:
      operator: *operator
      ingress:
        my-ingress:
          enabled: true
          primary: true
          integrations:
            traefik:
              enabled: true
              entrypoints:
                - web
                - websecure
    asserts:
      - documentIndex: *ingressDoc
        isKind:
          of: Ingress
      - documentIndex: *ingressDoc
        equal:
          path: metadata.name
          value: test-release-name-common-test
      - documentIndex: *ingressDoc
        equal:
          path: metadata.annotations
          value:
            traefik.ingress.kubernetes.io/router.entrypoints: web,websecure
            traefik.ingress.kubernetes.io/router.middlewares: chain-basic-tc-system@kubernetescrd

  - it: should not contain fixed middlewares when global is disabled
    set:
      operator: *operator
      global:
        traefik:
          enableFixedMiddlewares: false
      ingress:
        my-ingress:
          enabled: true
          primary: true
          integrations:
            traefik:
              enabled: true
    asserts:
      - documentIndex: *ingressDoc
        isKind:
          of: Ingress
      - documentIndex: *ingressDoc
        equal:
          path: metadata.annotations
          value:
            traefik.ingress.kubernetes.io/router.entrypoints: websecure

  - it: should not contain fixed middlewares when local is disabled
    set:
      operator: *operator
      global:
        traefik:
          enableFixedMiddlewares: true
      ingress:
        my-ingress:
          enabled: true
          primary: true
          integrations:
            traefik:
              enabled: true
              enableFixedMiddlewares: false
    asserts:
      - documentIndex: *ingressDoc
        isKind:
          of: Ingress
      - documentIndex: *ingressDoc
        equal:
          path: metadata.annotations
          value:
            traefik.ingress.kubernetes.io/router.entrypoints: websecure

  - it: should set correct namespace when operator is registered
    set:
      operator:
        verify:
          enabled: false
        traefik:
          namespace: some-ns
      ingress:
        my-ingress:
          enabled: true
          primary: true
          integrations:
            traefik:
              enabled: true
              entrypoints:
                - web
                - websecure
    asserts:
      - documentIndex: *ingressDoc
        isKind:
          of: Ingress
      - documentIndex: *ingressDoc
        equal:
          path: metadata.name
          value: test-release-name-common-test
      - documentIndex: *ingressDoc
        equal:
          path: metadata.annotations
          value:
            traefik.ingress.kubernetes.io/router.entrypoints: web,websecure
            traefik.ingress.kubernetes.io/router.middlewares: chain-basic-some-ns@kubernetescrd

  - it: should set correct namespace when ingressClassName is defined regardless of operator
    set:
      operator:
        verify:
          enabled: false
        traefik:
          namespace: some-ns
      ingress:
        my-ingress:
          enabled: true
          primary: true
          integrations:
            traefik:
              enabled: true
              ingressClassName: some-class
    asserts:
      - documentIndex: *ingressDoc
        isKind:
          of: Ingress
      - documentIndex: *ingressDoc
        equal:
          path: metadata.name
          value: test-release-name-common-test
      - documentIndex: *ingressDoc
        equal:
          path: metadata.annotations
          value:
            traefik.ingress.kubernetes.io/router.entrypoints: websecure
            traefik.ingress.kubernetes.io/router.middlewares: chain-basic-some-class@kubernetescrd

  - it: should set correct namespace when ingressClassName is defined in SCALE regardless of operator
    set:
      operator:
        verify:
          enabled: false
        traefik:
          namespace: some-ns
      global:
        ixChartContext:
          imNotEmpty: true
      namespace: ix-namespace
      ingress:
        my-ingress:
          enabled: true
          primary: true
          integrations:
            traefik:
              enabled: true
              ingressClassName: some-class
    asserts:
      - documentIndex: *ingressDoc
        isKind:
          of: Ingress
      - documentIndex: *ingressDoc
        equal:
          path: metadata.name
          value: test-release-name-common-test
      - documentIndex: *ingressDoc
        equal:
          path: metadata.annotations
          value:
            traefik.ingress.kubernetes.io/router.entrypoints: websecure
            traefik.ingress.kubernetes.io/router.middlewares: chain-basic-ix-some-class@kubernetescrd

  - it: should add the defined middlewares to the ingress
    set:
      operator: *operator
      ingress:
        my-ingress:
          enabled: true
          primary: true
          integrations:
            traefik:
              enabled: true
              middlewares:
                - some-middleware
                - some-other-middleware
    asserts:
      - documentIndex: *ingressDoc
        isKind:
          of: Ingress
      - documentIndex: *ingressDoc
        isKind:
          of: Ingress
      - documentIndex: *ingressDoc
        equal:
          path: metadata.name
          value: test-release-name-common-test
      - documentIndex: *ingressDoc
        equal:
          path: metadata.annotations
          value:
            traefik.ingress.kubernetes.io/router.entrypoints: websecure
            traefik.ingress.kubernetes.io/router.middlewares: chain-basic-tc-system@kubernetescrd,some-middleware-tc-system@kubernetescrd,some-other-middleware-tc-system@kubernetescrd

  - it: should disable traefik annotations in ingress
    set:
      operator: *operator
      global:
        traefik:
          addIngressAnnotations: false
      ingress:
        my-ingress:
          enabled: true
          primary: true
    asserts:
      - documentIndex: *ingressDoc
        isKind:
          of: Ingress
      - documentIndex: *ingressDoc
        equal:
          path: metadata.name
          value: test-release-name-common-test
      - documentIndex: *ingressDoc
        isNull:
          path: metadata.annotations

  - it: should override global disable for traefik annotations in ingress
    set:
      operator: *operator
      global:
        traefik:
          addIngressAnnotations: false
      ingress:
        my-ingress:
          enabled: true
          primary: true
          integrations:
            traefik:
              enabled: true
    asserts:
      - documentIndex: *ingressDoc
        isKind:
          of: Ingress
      - documentIndex: *ingressDoc
        equal:
          path: metadata.name
          value: test-release-name-common-test
      - documentIndex: *ingressDoc
        equal:
          path: metadata.annotations
          value:
            traefik.ingress.kubernetes.io/router.entrypoints: websecure
            traefik.ingress.kubernetes.io/router.middlewares: chain-basic-tc-system@kubernetescrd

  - it: should override global disable for traefik annotations in ingress
    set:
      operator: *operator
      global:
        traefik:
          addIngressAnnotations: true
      ingress:
        my-ingress:
          enabled: true
          primary: true
          integrations:
            traefik:
              enabled: false
    asserts:
      - documentIndex: *ingressDoc
        isKind:
          of: Ingress
      - documentIndex: *ingressDoc
        equal:
          path: metadata.name
          value: test-release-name-common-test
      - documentIndex: *ingressDoc
        isNull:
          path: metadata.annotations

  # Failures
  - it: should fail with entrypoint not a slice
    set:
      operator: *operator
      ingress:
        my-ingress1:
          enabled: true
          primary: true
          integrations:
            traefik:
              enabled: true
              entrypoints: "not a string"
    asserts:
      - failedTemplate:
          errorMessage: Ingress - Expected [integrations.traefik.entrypoints] to be a [slice], but got [string]

  - it: should fail with middlewares not a slice
    set:
      operator: *operator
      ingress:
        my-ingress1:
          enabled: true
          primary: true
          integrations:
            traefik:
              enabled: true
              middlewares: "not a slice"
    asserts:
      - failedTemplate:
          errorMessage: Ingress - Expected [integrations.traefik.middlewares] to be a [slice], but got [string]

  - it: should fail with fixedMiddlewares not a slice
    set:
      operator: *operator
      ingress:
        my-ingress1:
          enabled: true
          primary: true
          integrations:
            traefik:
              enabled: true
              fixedMiddlewares: "not a slice"
    asserts:
      - failedTemplate:
          errorMessage: Ingress - Expected [integrations.traefik.fixedMiddlewares] to be a [slice], but got [string]

  - it: should fail with duplicate middlewares
    set:
      operator: *operator
      ingress:
        my-ingress1:
          enabled: true
          primary: true
          integrations:
            traefik:
              enabled: true
              middlewares:
                - chain-basic
    asserts:
      - failedTemplate:
          errorMessage: Ingress - Combined traefik middlewares contain duplicates [chain-basic, chain-basic]

  - it: should fail with duplicate entrypoints
    set:
      operator: *operator
      ingress:
        my-ingress1:
          enabled: true
          primary: true
          integrations:
            traefik:
              enabled: true
              entrypoints:
                - websecure
                - websecure
    asserts:
      - failedTemplate:
          errorMessage: Ingress - Combined traefik entrypoints contain duplicates [websecure, websecure]
